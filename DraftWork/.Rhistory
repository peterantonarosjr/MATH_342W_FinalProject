}
}
missingDummies
missingDummies
#########################################################################################
#Now let's create our missing dummies for our other categorical features
missingTable = housingData[,.(garage_exists,fuel_type,kitchen_type,dining_room_type)]
mRows = nrow(missingTable)
mCols = ncol(missingTable)
missingDummies = setNames(data.table(matrix(0,nrow = mRows, ncol = mCols)), c("garage_exists", "fuel_type", "kitchen_type","dining_room_type"))
mNames = names(missingDummies)
gMissing = missingTable[is.na(garage_exists), .I]
fMissing = missingTable[is.na(fuel_type), .I]
kMissing = missingTable[is.na(kitchen_type), .I]
dMissing = missingTable[is.na(dining_room_type), .I]
missList = list(gMissing,fMissing,kMissing,dMissing)
missingDummies
for(type in 1:length(missList)){
for(missing in 1:length(missList[[1]])){
missingDummies[missing,(mNames[missing]):=1]
}
}
missingDummies
missingDummies
#########################################################################################
#Now let's create our missing dummies for our other categorical features
missingTable = housingData[,.(garage_exists,fuel_type,kitchen_type,dining_room_type)]
mRows = nrow(missingTable)
mCols = ncol(missingTable)
missingDummies = setNames(data.table(matrix(0,nrow = mRows, ncol = mCols)), c("garage_exists", "fuel_type", "kitchen_type","dining_room_type"))
mNames = names(missingDummies)
gMissing = missingTable[is.na(garage_exists), .I]
fMissing = missingTable[is.na(fuel_type), .I]
kMissing = missingTable[is.na(kitchen_type), .I]
dMissing = missingTable[is.na(dining_room_type), .I]
missList = list(gMissing,fMissing,kMissing,dMissing)
for(type in 1:length(missList)){
for(missing in 1:length(missList[[type]])){
missingDummies[missing,(mNames[missing]):=1]
}
}
missingDummies
missingDummies
length(missList)
#########################################################################################
#Now let's create our missing dummies for our other categorical features
missingTable = housingData[,.(garage_exists,fuel_type,kitchen_type,dining_room_type)]
mRows = nrow(missingTable)
mCols = ncol(missingTable)
missingDummies = setNames(data.table(matrix(0,nrow = mRows, ncol = mCols)), c("garage_exists", "fuel_type", "kitchen_type","dining_room_type"))
mNames = names(missingDummies)
gMissing = missingTable[is.na(garage_exists), .I]
fMissing = missingTable[is.na(fuel_type), .I]
kMissing = missingTable[is.na(kitchen_type), .I]
dMissing = missingTable[is.na(dining_room_type), .I]
missList = list(gMissing,fMissing,kMissing,dMissing)
for(type in 1:length(missList)){
for(missing in 1:length(missList[[type]])){
missingDummies[missing,(mNames[type]):=1]
}
}
missingDummies
missingDummies
missingTable
missingDummies
missingTable
missingDummies
missingTable
fMissing
missingTable
fMissing
gMissing
missingTable
dMissing
which(is.na(missingTable[,dining_room_type]))
#########################################################################################
#Now let's create our missing dummies for our other categorical features
missingTable = housingData[,.(garage_exists,fuel_type,kitchen_type,dining_room_type)]
mRows = nrow(missingTable)
mCols = ncol(missingTable)
mNames = names(missingDummies)
fMissing = which(is.na(missingTable[,fuel_type]))
missList = list(gMissing,fMissing,kMissing,dMissing)
for(type in 1:length(missList)){
for(missing in 1:length(missList[[type]])){
missingDummies[missing,(mNames[type]):=1]
}
}
for(type in 1:length(missList)){
for(missing in 1:length(missList[[type]])){
missingDummies[missing,(mNames[type]):=1]
}
}
dMissing
missingTable
missingDummies
missingDummies
dMissing
gMissing = which(is.na(missingTable[,garage_exists]))
fMissing = which(is.na(missingTable[,fuel_type]))
kMissing = which(is.na(missingTable[,kitchen_type]))
dMissing = which(is.na(missingTable[,dining_room_type]))
dMissing
for(type in 1:length(missList)){
for(missing in 1:length(missList[[type]])){
missingDummies[missing,(mNames[type]):=1]
}
}
missingDummies
missingDummies
for(missing in missList[[type]]){
missingDummies[missing,(mNames[type]):=1]
}
for(type in 1:length(missList)){
for(missing in missList[[type]]){
missingDummies[missing,(mNames[type]):=1]
}
}
missingDummies
missingDummies
#########################################################################################
#Now let's create our missing dummies for our other categorical features
missingTable = housingData[,.(garage_exists,fuel_type,kitchen_type,dining_room_type)]
mRows = nrow(missingTable)
mCols = ncol(missingTable)
missingDummies = setNames(data.table(matrix(0,nrow = mRows, ncol = mCols)), c("garage_exists", "fuel_type", "kitchen_type","dining_room_type"))
mNames = names(missingDummies)
gMissing = which(is.na(missingTable[,garage_exists]))
fMissing = which(is.na(missingTable[,fuel_type]))
kMissing = which(is.na(missingTable[,kitchen_type]))
dMissing = which(is.na(missingTable[,dining_room_type]))
missList = list(gMissing,fMissing,kMissing,dMissing)
for(type in 1:length(missList)){
for(missing in missList[[type]]){
missingDummies[missing,(mNames[type]):=1]
}
}
dMissing
missingTable
dMissing
missingDummies
#########################################################################################
#Now let's create our missing dummies for our other categorical features
missingTable = housingData[,.(garage_exists,fuel_type,kitchen_type,dining_room_type)]
mRows = nrow(missingTable)
mCols = ncol(missingTable)
missingDummies = setNames(data.table(matrix(0,nrow = mRows, ncol = mCols)), c("garage_exists_miss", "fuel_type_miss", "kitchen_type_miss","dining_room_type_miss"))
mNames = names(missingDummies)
gMissing = which(is.na(missingTable[,garage_exists]))
fMissing = which(is.na(missingTable[,fuel_type]))
kMissing = which(is.na(missingTable[,kitchen_type]))
dMissing = which(is.na(missingTable[,dining_room_type]))
missList = list(gMissing,fMissing,kMissing,dMissing)
for(type in 1:length(missList)){
for(missing in missList[[type]]){
missingDummies[missing,(mNames[type]):=1]
}
}
missingDummies
########################################################################################
#First lets start with the data that we are sure we want to impute
imputeData = housingData[,.(approx_year_built,cats_allowed,community_district_num,coop_condo,date_of_sale,
dogs_allowed,num_bedrooms,num_floors_in_building,totalBathrooms,
sq_footage,walk_score,zip_code,totalCharges,median_income
)]
#Rationale as to why we are leaving out some of the categorical columns
#Garage -> Missing data could imply there is no garage
#fuel_type -> Missing data could imply some alternate form of energy or perhaps none at all
#kitchen_type -> Missing data could imply there is no kitchen
#dining_type -? Missing data could imply there is no dining room
#We are also not including the columns we used to aggregate into new columns such as half and full bathrooms
Ximp = missForest(imputeData,verbose = TRUE)
#Check the OOB error
Ximp$OOBerror
#Assign imputed data table
imputedHousing = Ximp$ximp
imputedHousing[,sale_price := housingData[,sale_price]]
#########################################################################################
#Second using this we will now impute the sale price, once all of our other columns have been filled
Ximp2 = missForest(imputedHousing,verbose = TRUE)
Ximp2$OOBerror
#########################################################################################
#Now let's create our missing dummies for our other categorical features
missingTable = housingData[,.(garage_exists,fuel_type,kitchen_type,dining_room_type)]
mRows = nrow(missingTable)
mCols = ncol(missingTable)
missingDummies = setNames(data.table(matrix(0,nrow = mRows, ncol = mCols)), c("garage_exists_miss", "fuel_type_miss", "kitchen_type_miss","dining_room_type_miss"))
mNames = names(missingDummies)
gMissing = which(is.na(missingTable[,garage_exists]))
fMissing = which(is.na(missingTable[,fuel_type]))
kMissing = which(is.na(missingTable[,kitchen_type]))
dMissing = which(is.na(missingTable[,dining_room_type]))
missList = list(gMissing,fMissing,kMissing,dMissing)
for(type in 1:length(missList)){
for(missing in missList[[type]]){
missingDummies[missing,(mNames[type]):=1]
}
}
missingDummies
imputedHousing2 = Ximp2$ximp
missingDummies
merge(imputedHousing2,missingDummies)
data.table((imputedHousing2,missingDummies))
imputedHousing2
missingDummies
cbind(imputedHousing2, missingDummies[, 1])
cbind(imputedHousing2, missingDummies[, 1:5])
cbind(imputedHousing2, missingDummies[, 1:4])
kMissing
finalHousingData = cbind(imputedHousing2, missingDummies[, 1:4])
finalHousingData
missingTable
#Now we want to combine these two tables together
finalHousingData = cbind(imputedHousing2,missingTable, missingDummies[, 1:4])
finalHousingData
#Now we want to combine these two tables together
finalHousingData = cbind(imputedHousing2, missingDummies[, 1:4])
finalHousingData
finalHousingData$sale_price
finalHousingData
X = finalHousingData[,!sale_price]
X
X = finalHousingData[,!.(sale_price)]
X = finalHousingData[,!(sale_price)]
X
X = finalHousingData[,-.(sale_price)]
X = finalHousingData[,-sale_price]
X
X = finalHousingData[, -which(names(finalHousingData) == "sale_price")]
X
finalHousingData
X = finalHousingData[, -which(names(finalHousingData) == "sale_price")]
X
X = finalHousingData[-which(names(finalHousingData) == "sale_price")]
X
X$sale_price
X = finalHousingData[,.SD, .SDcols = !c("sale_price")]
X
y = finalHousingData[,sale_price]
y
lin_mod = lm(y~X)
lin_mod = lm(y~X,finalHousingData)
X = finalHousingData[,.SD, .SDcols = !c("sale_price")]
X
lin_mod = lm(y~X,finalHousingData)
lin_mod = lm(y~X,data=finalHousingData)
lin_mod = lm(y~.,data=finalHousingData)
X = finalHousingData[,c("square_footage","meadian_income","totalCharges","garage_exists_miss")]
X = finalHousingData[,.("square_footage","meadian_income","totalCharges","garage_exists_miss")]
y = finalHousingData[,sale_price]
lin_mod = lm(y~.,data=finalHousingData)
X
X = finalHousingData[,.(square_footage,meadian_income,totalCharges,garage_exists_miss)]
X = finalHousingData[,.(sq_footage,meadian_income,totalCharges,garage_exists_miss)]
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss)]
y = finalHousingData[,sale_price]
lin_mod = lm(y~.,data=finalHousingData)
lin_mod = lm(y~X,)
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
lin_mod
lin_mod$fitted.values
predict(lin_mod,X)
plot(predict(lin_mod,X),                                # Draw plot using Base R
y,
xlab = "Predicted Values",
ylab = "Observed Values")
abline(a = 0,                                        # Add straight line
b = 1,
col = "red",
lwd = 2)
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
plot(predict(lin_mod,X),                                # Draw plot using Base R
y,
xlab = "Predicted Values",
ylab = "Observed Values")
lin_mod = lm(y~.,data=testSet)
plot(predict(lin_mod,X),                                # Draw plot using Base R
y,
xlab = "Predicted Values",
ylab = "Observed Values")
X = finalHousingData[,.(sq_footage,median_income,totalCharges,walk_score,totalBathrooms,num_bedrooms,approx_year_built)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
plot(predict(lin_mod,X),                                # Draw plot using Base R
y,
xlab = "Predicted Values",
ylab = "Observed Values")
plot(predict(lin_mod,X),                                # Draw plot using Base R
y,
xlab = "Predicted Values",
ylab = "Observed Values")
abline(a = 0,                                        # Add straight line
b = 1,
col = "red",
lwd = 2)
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
plot(predict(lin_mod,X),                                # Draw plot using Base R
y,
xlab = "Predicted Values",
ylab = "Observed Values")
abline(a = 0,                                        # Add straight line
b = 1,
col = "red",
lwd = 2)
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built,cats_allowed,dogs_allowed,zip_code,date_of_sale)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built,cats_allowed,dogs_allowed,zip_code)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
plot(predict(lin_mod,X),                                # Draw plot using Base R
y,
xlab = "Predicted Values",
ylab = "Observed Values")
plot(predict(lin_mod,X),                                # Draw plot using Base R
y,
xlab = "Predicted Values",
ylab = "Observed Values")
abline(a = 0,                                        # Add straight line
b = 1,
col = "red",
lwd = 2)
names(finalHousingData)
X = finalHousingData[,.("approx_year_built","cats_allowed","community_district_num","coop_condo",
"dogs_allowed","num_bedrooms","num_floors_in_building","totalBathrooms","sq_footage",
"walk_score","zip_code","totalCharges","median_income","garage_exists_miss","fuel_type_miss","kitchen_type_miss"
,"dining_room_type_miss")]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
X = finalHousingData[,.("approx_year_built","cats_allowed","community_district_num",
"dogs_allowed","num_bedrooms","num_floors_in_building","totalBathrooms","sq_footage",
"walk_score","zip_code","totalCharges","median_income","garage_exists_miss","fuel_type_miss","kitchen_type_miss"
,"dining_room_type_miss")]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
X = finalHousingData[,.("approx_year_built","cats_allowed","community_district_num","coop_condo",
"dogs_allowed","num_bedrooms","num_floors_in_building","totalBathrooms","sq_footage",
"walk_score","zip_code","totalCharges","median_income","garage_exists_miss")]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built,cats_allowed,dogs_allowed,zip_code,coop_condo)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
plot(predict(lin_mod,X),                                # Draw plot using Base R
y,
xlab = "Predicted Values",
ylab = "Observed Values")
plot(predict(lin_mod,X),                                # Draw plot using Base R
y,
xlab = "Predicted Values",
ylab = "Observed Values")
abline(a = 0,                                        # Add straight line
b = 1,
col = "red",
lwd = 2)
predict(lin_modX)
predict(lin_mod,X)
sum(predict(lin_mod,X))
sum((finalHousingData[,sale_price]-predict(lin_mod,X)^2))/length(finalHousingData[,sale_price])
sqrt(sum((finalHousingData[,sale_price]-predict(lin_mod,X)^2))/length(finalHousingData[,sale_price]))
length(finalHousingData[,sale_price])
sum((finalHousingData[,sale_price]-predict(lin_mod,X)^2)
sum((finalHousingData[,sale_price]-predict(lin_mod,X)^2)
sum((finalHousingData[,sale_price]-predict(lin_mod,X)^2))
sqrt(sum((finalHousingData[,sale_price]-predict(lin_mod,X))^2)/length(finalHousingData[,sale_price]))
plot(predict(lin_mod,X),
y,
xlab = "Predicted Values",
ylab = "Observed Values")
abline(a = 0,
b = 1,
col = "red",
lwd = 2)
X = finalHousingData[,.(sq_footage,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built,cats_allowed,dogs_allowed,zip_code,coop_condo)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
plot(predict(lin_mod,X),
y,
xlab = "Predicted Values",
ylab = "Observed Values")
abline(a = 0,
b = 1,
col = "red",
lwd = 2)
plot(predict(lin_mod,X),
y,
xlab = "Predicted Values",
ylab = "Observed Values")
abline(a = 0,
b = 1,
col = "red",
lwd = 2)
#In Sample RMSE test
sqrt(sum((finalHousingData[,sale_price]-predict(lin_mod,X))^2)/length(finalHousingData[,sale_price]))
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built,cats_allowed,dogs_allowed,coop_condo)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
#In Sample RMSE test
sqrt(sum((finalHousingData[,sale_price]-predict(lin_mod,X))^2)/length(finalHousingData[,sale_price]))
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built,cats_allowed,zip_code,coop_condo)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
#In Sample RMSE test
sqrt(sum((finalHousingData[,sale_price]-predict(lin_mod,X))^2)/length(finalHousingData[,sale_price]))
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built,dogs_allowed,zip_code,coop_condo)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
#In Sample RMSE test
sqrt(sum((finalHousingData[,sale_price]-predict(lin_mod,X))^2)/length(finalHousingData[,sale_price]))
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built,cats_allowed,dogs_allowed,zip_code,coop_condo,garage_exists_miss)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built,cats_allowed,dogs_allowed,zip_code,coop_condo,kitchen_type_miss)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built,cats_allowed,dogs_allowed,zip_code,coop_condo)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
#In Sample RMSE test
sqrt(sum((finalHousingData[,sale_price]-predict(lin_mod,X))^2)/length(finalHousingData[,sale_price]))
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built,cats_allowed,dogs_allowed,zip_code,coop_condo)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
#In Sample RMSE test
sqrt(sum((finalHousingData[,sale_price]-predict(lin_mod,X))^2)/length(finalHousingData[,sale_price]))
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
#In Sample RMSE test
sqrt(sum((finalHousingData[,sale_price]-predict(lin_mod,X))^2)/length(finalHousingData[,sale_price]))
plot(predict(lin_mod,X),
y,
xlab = "Predicted Values",
ylab = "Observed Values")
#In Sample RMSE test
sqrt(sum((finalHousingData[,sale_price]-predict(lin_mod,X))^2)/length(finalHousingData[,sale_price]))
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built,cats_allowed,dogs_allowed,zip_code,coop_condo)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
#In Sample RMSE test
sqrt(sum((finalHousingData[,sale_price]-predict(lin_mod,X))^2)/length(finalHousingData[,sale_price]))
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built,cats_allowed,dogs_allowed,zip_code,coop_condo,num_floors_in_building)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
#In Sample RMSE test
sqrt(sum((finalHousingData[,sale_price]-predict(lin_mod,X))^2)/length(finalHousingData[,sale_price]))
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built,cats_allowed,dogs_allowed,zip_code,coop_condo,num_floors_in_building,community_district_num)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
#In Sample RMSE test
sqrt(sum((finalHousingData[,sale_price]-predict(lin_mod,X))^2)/length(finalHousingData[,sale_price]))
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built,cats_allowed,dogs_allowed,zip_code,coop_condo,num_floors_in_building,community_district_num,fuel_type_miss)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
#In Sample RMSE test
sqrt(sum((finalHousingData[,sale_price]-predict(lin_mod,X))^2)/length(finalHousingData[,sale_price]))
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,approx_year_built,cats_allowed,dogs_allowed,zip_code,coop_condo,num_floors_in_building,community_district_num,fuel_type_miss,dining_room_type_miss)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
#In Sample RMSE test
sqrt(sum((finalHousingData[,sale_price]-predict(lin_mod,X))^2)/length(finalHousingData[,sale_price]))
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,cats_allowed,dogs_allowed,zip_code,coop_condo,num_floors_in_building)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
#In Sample RMSE test
sqrt(sum((finalHousingData[,sale_price]-predict(lin_mod,X))^2)/length(finalHousingData[,sale_price]))
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,zip_code,coop_condo,num_floors_in_building)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
#In Sample RMSE test
sqrt(sum((finalHousingData[,sale_price]-predict(lin_mod,X))^2)/length(finalHousingData[,sale_price]))
X = finalHousingData[,.(sq_footage,median_income,totalCharges,garage_exists_miss,walk_score,totalBathrooms,num_bedrooms,kitchen_type_miss,zip_code,coop_condo,num_floors_in_building,approx_year_built)]
y = finalHousingData[,sale_price]
testSet = cbind(X,y)
lin_mod = lm(y~.,data=testSet)
#In Sample RMSE test
sqrt(sum((finalHousingData[,sale_price]-predict(lin_mod,X))^2)/length(finalHousingData[,sale_price]))
