#configureMlr(show.info = FALSE, show.learner.output = FALSE, on.learner.warning = "quiet")
if (!pacman::p_isinstalled(YARF)){
pacman::p_install_gh("kapelner/YARF/YARFJARs", ref = "dev")
pacman::p_install_gh("kapelner/YARF/YARF", ref = "dev", force = TRUE)
}
options(java.parameters = "-Xmx4000m")
pacman::p_load(YARF)
PATH_TO_CSV = "C:\\Users\\arapr\\Downloads\\housing.csv"
housing = fread(PATH_TO_CSV)
PATH_TO_CSV = "/home/peterjr/RepoCollections/MATH_342W_FinalProject/Datasets/housing.csv"
housing = fread(PATH_TO_CSV)
PATH_TO_CSV = "/home/peterjr/RepoCollections/MATH_342W_FinalProject/Datasets/housing_data_2016_2017.csv"
housing = fread(PATH_TO_CSV)
colnames(housing)
set.seed(1984)
pacman::p_load(tidyverse, magrittr, data.table, ggplot2, lubridate, R.utils, skimr, missForest, qdapRegex)
#install.packages('mlr', repo='http://cran.fiocruz.br/')
#configureMlr(show.info = FALSE, show.learner.output = FALSE, on.learner.warning = "quiet")
if (!pacman::p_isinstalled(YARF)){
pacman::p_install_gh("kapelner/YARF/YARFJARs", ref = "dev")
pacman::p_install_gh("kapelner/YARF/YARF", ref = "dev", force = TRUE)
}
options(java.parameters = "-Xmx4000m")
pacman::p_load(YARF)
PATH_TO_CSV = "/home/peterjr/RepoCollections/MATH_342W_FinalProject/Datasets/housing_data_2016_2017.csv"
housing = fread(PATH_TO_CSV)
colnames(housing)
housing <- housing %>%
select(-HITId, -HITTypeId, -Title, -Description, -Keywords, -Reward, -MaxAssignments, -RequesterAnnotation, -AssignmentDurationInSeconds, -AutoApprovalDelayInSeconds, -NumberOfSimilarHITs, -LifetimeInSeconds, -RejectionTime, -RequesterFeedback, -URL, -url, -WorkTimeInSeconds, -WorkerId, -SubmitTime, -LifetimeApprovalRate, -Last7DaysApprovalRate, -Last30DaysApprovalRate, -Expiration, -CreationTime, -AutoApprovalTime, -AssignmentStatus, -AssignmentId, -ApprovalTime, -AcceptTime)
colnames(housing)
M <- housing %>%
gather(key = "key", value = "val") %>%
mutate(is.missing = is.na(val)) %>%
group_by(key, is.missing) %>%
summarise(num.missing = n()) %>%
filter(is.missing==TRUE) %>%
select(-is.missing) %>%
arrange(desc(num.missing))
M %>% ggplot() +
geom_bar(aes(x=key, y=num.missing), stat = 'identity') +
labs(x='Feature', y = "# Missing Values", title='Number of missing values') +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()
get_zip = function(x) {
pot_zips = unlist(rm_zip(x, extract=TRUE))
return(pot_zips[length(pot_zips)])
}
remove_money_sign = function(x) {
x <- x %>% str_remove("\\$") %>% str_remove(",")
return(x)
}
categorize_zip = function(x) {
category = ""
if (is.element(x, NE)) {
category = "NE"
} else if (is.element(x, N)) {
category = "N"
} else if (is.element(x, C)) {
category = "C"
} else if (is.element(x, J)) {
category = "J"
} else if (is.element(x, NE)) {
category = "NE"
} else if (is.element(x, WC)) {
category = "WC"
} else if (is.element(x, NE)) {
category = "NE"
} else if (is.element(x, WC)) {
category = "WC"
} else if (is.element(x, SE)) {
category = "SE"
} else if (is.element(x, SW)) {
category = "SW"
} else if (is.element(x, W)) {
category = "W"
} else {
return(NA)
}
return(as.factor(category))
}
categorize_kitchen <- function(x) {
if (is.na(x)) {
return(NA)
}
category = ""
if (x == "eat in" | x == "eatin" | x == "Eat In" | x == "Eat in") {
category = "EI"
} else if ( x == "efficiency" | x == "efficiency kitchene" | x == "efficiency kitchen" | x == "efficiemcy" | x == "efficiency ktchen") {
category = "EF"
} else if (x == "Combo" | x == "combo") {
category = "C"
} else {
return(NA)
}
return(as.factor(category))
}
NE = c(11361, 11362, 11363, 11364)
N = c(11354, 11355, 11356, 11357, 11358, 11359, 11360)
C = c(11365, 11366, 11367)
J = c(11412, 11423, 11432, 11433, 11434, 11435, 11436)
NW = c(11101, 11102, 11103, 11104, 11105, 11106)
WC = c(11374, 11375, 11379, 11385)
SE = c(11004, 11005, 11411, 11413, 11422, 11426, 11427, 11428, 11429)
SW = c(11414, 11415, 11416, 11417, 11418, 11419, 11420, 11421)
W = c(11368, 11369, 11370, 11372, 11373, 11377, 11378)
housing <- housing %>%
rowwise() %>%
mutate(zip = categorize_zip(as.numeric(get_zip(full_address_or_zip_code))))
housing <- housing %>%
select(-model_type, -full_address_or_zip_code)
housing <- housing %>%
mutate(common_charges = as.numeric(remove_money_sign(common_charges)),
maintenance_cost = as.numeric(remove_money_sign(maintenance_cost)),
parking_charges = as.numeric(remove_money_sign(parking_charges)),
sale_price = as.numeric(remove_money_sign(sale_price)),
total_taxes = as.numeric(remove_money_sign(total_taxes))) %>%
select(-listing_price_to_nearest_1000)
housing = housing %>% rowwise() %>% mutate(all_charges = sum(total_taxes,parking_charges, maintenance_cost,common_charges,na.rm=TRUE))
housing = select(housing, -c(total_taxes,parking_charges,maintenance_cost,common_charges))
housing
housing %>% ggplot() +
geom_point(aes(x = sale_price, y = sq_footage)) +
labs(x = "Sale Price", y = "Square Footage", title='Square Feet vs. Sale Price') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
housing <- housing %>%
mutate(cats_allowed = as.factor(ifelse(cats_allowed == "yes" | cats_allowed == "y", 1, 0)),
dogs_allowed = as.factor(ifelse(dogs_allowed == "yes" | dogs_allowed == "y", 1, 0)))
housing %>%
ggplot() +
geom_histogram(aes(x = cats_allowed), stat = "count") +
labs(x = 'Cats Allowed', y = "Count", title='Cats Allowed') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
housing %>%
ggplot() +
geom_histogram(aes(x = dogs_allowed), stat = "count", position = position_dodge(0.8)) +
labs(x = 'Dogs Allowed', y = "Count", title='Dogs Allowed') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
housing <- housing %>%
mutate(coop_condo = as.factor(coop_condo))
housing <- housing %>%
mutate(dining_room_type = as.factor(ifelse(dining_room_type == "dining area" | dining_room_type == "none", "other", dining_room_type)))
housing %>%
ggplot() +
geom_histogram(aes(x = dining_room_type), stat = "count") +
labs(x = 'Dining Room Type', y = "Count", title = 'Dining Room Type') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
housing %>%
ggplot() +
geom_histogram(aes(x = garage_exists), stat = "count") +
labs(x = 'Garage Exists', y = "Count", title = 'garage Exists') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
housing <- housing %>%
select(-garage_exists)
housing %>%
ggplot() +
geom_histogram(aes(x = fuel_type), stat = "count") +
labs(x = 'Fuel Type', y = "Count", title = 'Fuel Type') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
housing <- housing %>%
mutate(fuel_type = as.factor(ifelse(fuel_type == "gas" | fuel_type == "oil", fuel_type, "other")))
housing %>%
ggplot() +
geom_histogram(aes(x = fuel_type), stat = "count") +
labs(x = 'Fuel Type', y = "Count", title = 'Fuel Type') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
housing <- housing %>%
mutate(date_of_sale = as.numeric(as.POSIXct(date_of_sale, format="%m/%d/%Y")))
housing %>%
ggplot() +
geom_histogram(aes(x = kitchen_type), stat = "count") +
labs(x = 'Kitchen Type', y = "Count", title = 'Kitchen Type') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
housing <- housing %>%
rowwise() %>%
mutate(kitchen_type = categorize_kitchen(kitchen_type)) %>%
select(-kitchen_type)
housing %>%
ggplot() +
geom_histogram(aes(x = as.factor(num_bedrooms)), stat = "count") +
labs(x = 'Number Of Bedrooms', y = "Count", title = 'Number of Bedrooms')
housing <- housing %>%
mutate(num_bedrooms = as.integer(num_bedrooms))
housing <- housing %>%
mutate(num_floors_in_building = as.integer(num_floors_in_building))
housing
housing = housing %>% rowwise() %>% mutate(all_bathrooms = sum(num_full_bathrooms ,num_half_bathrooms,na.rm=TRUE))
housing = select(housing, -c(num_full_bathrooms ,num_half_bathrooms))
housing
housing <- housing  %>%
select(-community_district_num)
housing <- housing %>%
mutate(num_total_rooms = as.integer(num_total_rooms), num_floors_in_building = as.integer(num_floors_in_building), num_bedrooms = as.integer(num_bedrooms))
housing
y <- housing$sale_price
X <- housing %>% select(-sale_price)
M = as_tibble(apply(is.na(X), 2, as.numeric))
colnames(M) = paste("is_missing_", colnames(X), sep = "")
M %<>%
select_if(function(x){sum(x) > 0})
skim(M)
M = tbl_df(t(unique(t(M))))
skim(M)
Ximp = missForest(data.frame(X), sampsize = rep(350, ncol(X)))$ximp
X_new = data.frame(Ximp, y) %>% drop_na()
X = X_new %>% select(-y)
y = X_new$y
n = nrow(X)
K = 5
test_indices = sample(1 : n, 1  / K * n)
train_indices = setdiff(1 : n, test_indices)
X_train = X[train_indices, ]
y_train = y[train_indices]
X_test = X[test_indices, ]
y_test = y[test_indices]
dim(X_train)
dim(X_test)
length(y_train)
length(y_test)
summary(X_new)
vanilla_ols = lm(y_train ~ ., X_train)
y_hat_train = predict(vanilla_ols, X_train)
e_train = y_train - y_hat_train
SSE = t(e_train) %*% e_train
MSE = 1 / (nrow(X_train) - ncol(X_train)) * SSE
RMSE = sqrt(MSE)
SSE
MSE
RMSE
s_sq_y = var(y_train)
n = length(e_train)
SST = (n - 1) * s_sq_y
Rsq = 1 - SSE / SST
Rsq
y_hat = predict(vanilla_ols, X_test)
e = y_test - y_hat
SSE = t(e) %*% e
MSE = 1 / (nrow(X_test) - ncol(X_test)) * SSE
RMSE = sqrt(MSE)
SSE
MSE
RMSE
s_sq_y = var(y_test)
n = length(e)
SST = (n - 1) * s_sq_y
Rsq = 1 - SSE / SST
Rsq
vanilla_ols$coefficients
summary(vanilla_ols)
Xy_train = data.frame(X_new)
all_model_formulas = list(
"y ~ .",
"y ~ . * .",
"log(y) ~ ."
)
modeling_task = makeRegrTask(data = Xy_train, target = "y")
modeling_task = makeRegrTask(data = Xy_train, target = "y")
Kouter = 15
outer_loop = makeResampleDesc("CV", iters = Kouter)
install.packages("mlr3").
install.packages("mlr3")
set.seed(1984)
pacman::p_load(tidyverse, magrittr, data.table, ggplot2, lubridate, R.utils, skimr, missForest, qdapRegex)
#install.packages('mlr', repo='http://cran.fiocruz.br/')
#configureMlr(show.info = FALSE, show.learner.output = FALSE, on.learner.warning = "quiet")
if (!pacman::p_isinstalled(YARF)){
pacman::p_install_gh("kapelner/YARF/YARFJARs", ref = "dev")
pacman::p_install_gh("kapelner/YARF/YARF", ref = "dev", force = TRUE)
}
options(java.parameters = "-Xmx4000m")
pacman::p_load(YARF)
PATH_TO_CSV = "/home/peterjr/RepoCollections/MATH_342W_FinalProject/Datasets/housing_data_2016_2017.csv"
housing = fread(PATH_TO_CSV)
colnames(housing)
housing <- housing %>%
select(-HITId, -HITTypeId, -Title, -Description, -Keywords, -Reward, -MaxAssignments, -RequesterAnnotation, -AssignmentDurationInSeconds, -AutoApprovalDelayInSeconds, -NumberOfSimilarHITs, -LifetimeInSeconds, -RejectionTime, -RequesterFeedback, -URL, -url, -WorkTimeInSeconds, -WorkerId, -SubmitTime, -LifetimeApprovalRate, -Last7DaysApprovalRate, -Last30DaysApprovalRate, -Expiration, -CreationTime, -AutoApprovalTime, -AssignmentStatus, -AssignmentId, -ApprovalTime, -AcceptTime)
colnames(housing)
M <- housing %>%
gather(key = "key", value = "val") %>%
mutate(is.missing = is.na(val)) %>%
group_by(key, is.missing) %>%
summarise(num.missing = n()) %>%
filter(is.missing==TRUE) %>%
select(-is.missing) %>%
arrange(desc(num.missing))
M %>% ggplot() +
geom_bar(aes(x=key, y=num.missing), stat = 'identity') +
labs(x='Feature', y = "# Missing Values", title='Number of missing values') +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
coord_flip()
get_zip = function(x) {
pot_zips = unlist(rm_zip(x, extract=TRUE))
return(pot_zips[length(pot_zips)])
}
remove_money_sign = function(x) {
x <- x %>% str_remove("\\$") %>% str_remove(",")
return(x)
}
categorize_zip = function(x) {
category = ""
if (is.element(x, NE)) {
category = "NE"
} else if (is.element(x, N)) {
category = "N"
} else if (is.element(x, C)) {
category = "C"
} else if (is.element(x, J)) {
category = "J"
} else if (is.element(x, NE)) {
category = "NE"
} else if (is.element(x, WC)) {
category = "WC"
} else if (is.element(x, NE)) {
category = "NE"
} else if (is.element(x, WC)) {
category = "WC"
} else if (is.element(x, SE)) {
category = "SE"
} else if (is.element(x, SW)) {
category = "SW"
} else if (is.element(x, W)) {
category = "W"
} else {
return(NA)
}
return(as.factor(category))
}
categorize_kitchen <- function(x) {
if (is.na(x)) {
return(NA)
}
category = ""
if (x == "eat in" | x == "eatin" | x == "Eat In" | x == "Eat in") {
category = "EI"
} else if ( x == "efficiency" | x == "efficiency kitchene" | x == "efficiency kitchen" | x == "efficiemcy" | x == "efficiency ktchen") {
category = "EF"
} else if (x == "Combo" | x == "combo") {
category = "C"
} else {
return(NA)
}
return(as.factor(category))
}
NE = c(11361, 11362, 11363, 11364)
N = c(11354, 11355, 11356, 11357, 11358, 11359, 11360)
C = c(11365, 11366, 11367)
J = c(11412, 11423, 11432, 11433, 11434, 11435, 11436)
NW = c(11101, 11102, 11103, 11104, 11105, 11106)
WC = c(11374, 11375, 11379, 11385)
SE = c(11004, 11005, 11411, 11413, 11422, 11426, 11427, 11428, 11429)
SW = c(11414, 11415, 11416, 11417, 11418, 11419, 11420, 11421)
W = c(11368, 11369, 11370, 11372, 11373, 11377, 11378)
housing <- housing %>%
rowwise() %>%
mutate(zip = categorize_zip(as.numeric(get_zip(full_address_or_zip_code))))
housing <- housing %>%
select(-model_type, -full_address_or_zip_code)
housing <- housing %>%
mutate(common_charges = as.numeric(remove_money_sign(common_charges)),
maintenance_cost = as.numeric(remove_money_sign(maintenance_cost)),
parking_charges = as.numeric(remove_money_sign(parking_charges)),
sale_price = as.numeric(remove_money_sign(sale_price)),
total_taxes = as.numeric(remove_money_sign(total_taxes))) %>%
select(-listing_price_to_nearest_1000)
housing = housing %>% rowwise() %>% mutate(all_charges = sum(total_taxes,parking_charges, maintenance_cost,common_charges,na.rm=TRUE))
housing = select(housing, -c(total_taxes,parking_charges,maintenance_cost,common_charges))
housing
housing %>% ggplot() +
geom_point(aes(x = sale_price, y = sq_footage)) +
labs(x = "Sale Price", y = "Square Footage", title='Square Feet vs. Sale Price') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
housing <- housing %>%
mutate(cats_allowed = as.factor(ifelse(cats_allowed == "yes" | cats_allowed == "y", 1, 0)),
dogs_allowed = as.factor(ifelse(dogs_allowed == "yes" | dogs_allowed == "y", 1, 0)))
housing %>%
ggplot() +
geom_histogram(aes(x = cats_allowed), stat = "count") +
labs(x = 'Cats Allowed', y = "Count", title='Cats Allowed') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
housing %>%
ggplot() +
geom_histogram(aes(x = dogs_allowed), stat = "count", position = position_dodge(0.8)) +
labs(x = 'Dogs Allowed', y = "Count", title='Dogs Allowed') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
housing <- housing %>%
mutate(coop_condo = as.factor(coop_condo))
housing <- housing %>%
mutate(dining_room_type = as.factor(ifelse(dining_room_type == "dining area" | dining_room_type == "none", "other", dining_room_type)))
housing %>%
ggplot() +
geom_histogram(aes(x = dining_room_type), stat = "count") +
labs(x = 'Dining Room Type', y = "Count", title = 'Dining Room Type') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
housing %>%
ggplot() +
geom_histogram(aes(x = garage_exists), stat = "count") +
labs(x = 'Garage Exists', y = "Count", title = 'garage Exists') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
housing <- housing %>%
select(-garage_exists)
housing %>%
ggplot() +
geom_histogram(aes(x = fuel_type), stat = "count") +
labs(x = 'Fuel Type', y = "Count", title = 'Fuel Type') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
housing <- housing %>%
mutate(fuel_type = as.factor(ifelse(fuel_type == "gas" | fuel_type == "oil", fuel_type, "other")))
housing %>%
ggplot() +
geom_histogram(aes(x = fuel_type), stat = "count") +
labs(x = 'Fuel Type', y = "Count", title = 'Fuel Type') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
housing <- housing %>%
mutate(date_of_sale = as.numeric(as.POSIXct(date_of_sale, format="%m/%d/%Y")))
housing %>%
ggplot() +
geom_histogram(aes(x = kitchen_type), stat = "count") +
labs(x = 'Kitchen Type', y = "Count", title = 'Kitchen Type') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
housing <- housing %>%
rowwise() %>%
mutate(kitchen_type = categorize_kitchen(kitchen_type)) %>%
select(-kitchen_type)
housing %>%
ggplot() +
geom_histogram(aes(x = as.factor(num_bedrooms)), stat = "count") +
labs(x = 'Number Of Bedrooms', y = "Count", title = 'Number of Bedrooms')
housing <- housing %>%
mutate(num_bedrooms = as.integer(num_bedrooms))
housing <- housing %>%
mutate(num_floors_in_building = as.integer(num_floors_in_building))
housing
housing = housing %>% rowwise() %>% mutate(all_bathrooms = sum(num_full_bathrooms ,num_half_bathrooms,na.rm=TRUE))
housing = select(housing, -c(num_full_bathrooms ,num_half_bathrooms))
housing
housing <- housing  %>%
select(-community_district_num)
housing <- housing %>%
mutate(num_total_rooms = as.integer(num_total_rooms), num_floors_in_building = as.integer(num_floors_in_building), num_bedrooms = as.integer(num_bedrooms))
housing
y <- housing$sale_price
X <- housing %>% select(-sale_price)
M = as_tibble(apply(is.na(X), 2, as.numeric))
colnames(M) = paste("is_missing_", colnames(X), sep = "")
M %<>%
select_if(function(x){sum(x) > 0})
skim(M)
M = tbl_df(t(unique(t(M))))
skim(M)
Ximp = missForest(data.frame(X), sampsize = rep(350, ncol(X)))$ximp
X_new = data.frame(Ximp, y) %>% drop_na()
X = X_new %>% select(-y)
y = X_new$y
n = nrow(X)
K = 5
test_indices = sample(1 : n, 1  / K * n)
train_indices = setdiff(1 : n, test_indices)
X_train = X[train_indices, ]
y_train = y[train_indices]
X_test = X[test_indices, ]
y_test = y[test_indices]
dim(X_train)
dim(X_test)
length(y_train)
length(y_test)
summary(X_new)
vanilla_ols = lm(y_train ~ ., X_train)
y_hat_train = predict(vanilla_ols, X_train)
e_train = y_train - y_hat_train
SSE = t(e_train) %*% e_train
MSE = 1 / (nrow(X_train) - ncol(X_train)) * SSE
RMSE = sqrt(MSE)
SSE
MSE
RMSE
s_sq_y = var(y_train)
n = length(e_train)
SST = (n - 1) * s_sq_y
Rsq = 1 - SSE / SST
Rsq
y_hat = predict(vanilla_ols, X_test)
e = y_test - y_hat
SSE = t(e) %*% e
MSE = 1 / (nrow(X_test) - ncol(X_test)) * SSE
RMSE = sqrt(MSE)
SSE
MSE
RMSE
s_sq_y = var(y_test)
n = length(e)
SST = (n - 1) * s_sq_y
Rsq = 1 - SSE / SST
Rsq
vanilla_ols$coefficients
summary(vanilla_ols)
Xy_train = data.frame(X_new)
all_model_formulas = list(
"y ~ .",
"y ~ . * .",
"log(y) ~ ."
)
modeling_task = makeRegrTask(data = Xy_train, target = "y")
#install.packages('mlr', repo='http://cran.fiocruz.br/')
configureMlr(show.info = FALSE, show.learner.output = FALSE, on.learner.warning = "quiet")
library(mlr3)
pacman::p_load(tidyverse, magrittr, data.table, ggplot2, lubridate, R.utils, skimr, missForest, mlr,qdapRegex)
set.seed(1984)
pacman::p_load(tidyverse, magrittr, data.table, ggplot2, lubridate, R.utils, skimr, missForest, mlr3,qdapRegex)
#install.packages('mlr', repo='http://cran.fiocruz.br/')
configureMlr(show.info = FALSE, show.learner.output = FALSE, on.learner.warning = "quiet")
#install.packages('mlr', repo='http://cran.fiocruz.br/')
configureMlr(show.info = FALSE, show.learner.output = FALSE, on.learner.warning = "quiet")
pacman::p_load(tidyverse, magrittr, data.table, ggplot2, lubridate, R.utils, skimr, missForest, mlr3 ,qdapRegex)
